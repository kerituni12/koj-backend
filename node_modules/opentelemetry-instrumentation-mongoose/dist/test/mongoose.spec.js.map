{"version":3,"file":"mongoose.spec.js","sourceRoot":"","sources":["../../test/mongoose.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import 'mocha';\nimport expect from 'expect';\nimport { context, ROOT_CONTEXT } from '@opentelemetry/api';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { MongooseInstrumentation } from '../src';\nimport { getTestSpans, registerInstrumentationTesting } from '@opentelemetry/contrib-test-utils';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\n\nconst instrumentation = registerInstrumentationTesting(new MongooseInstrumentation());\n\nimport mongoose from 'mongoose';\nimport User, { IUser, loadUsers } from './user';\nimport { assertSpan, getStatement } from './asserts';\n\n// Please run mongodb in the background: docker run -d -p 27017:27017 -v ~/data:/data/db mongo\ndescribe('mongoose instrumentation', () => {\n    before(async () => {\n        await mongoose.connect('mongodb://localhost:27017', {\n            useNewUrlParser: true,\n            useUnifiedTopology: true,\n            useFindAndModify: false,\n            useCreateIndex: true,\n        });\n    });\n\n    after(async () => {\n        await mongoose.connection.close();\n    });\n\n    beforeEach(async () => {\n        instrumentation.disable();\n        instrumentation.setConfig({\n            dbStatementSerializer: (_operation: string, payload) => JSON.stringify(payload),\n        });\n        instrumentation.enable();\n        await loadUsers();\n        await User.createIndexes();\n    });\n\n    afterEach(async () => {\n        instrumentation.disable();\n        await User.collection.drop().catch();\n    });\n\n    it('instrumenting save operation with promise', async () => {\n        const document = {\n            firstName: 'Test first name',\n            lastName: 'Test last name',\n            email: 'test@example.com',\n        };\n        const user: IUser = new User(document);\n\n        await user.save();\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('save');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.document).toEqual(expect.objectContaining(document));\n    });\n\n    it('instrumenting save operation with callback', (done) => {\n        const document = {\n            firstName: 'Test first name',\n            lastName: 'Test last name',\n            email: 'test@example.com',\n        };\n        const user: IUser = new User(document);\n\n        user.save(function () {\n            const spans = getTestSpans();\n\n            expect(spans.length).toBe(1);\n            assertSpan(spans[0] as ReadableSpan);\n            expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('save');\n            const statement = getStatement(spans[0] as ReadableSpan);\n            expect(statement.document).toEqual(expect.objectContaining(document));\n            done();\n        });\n    });\n\n    it('instrumenting find operation', async () => {\n        await User.find({ id: '_test' });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('find');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.condition).toEqual({ id: '_test' });\n    });\n\n    it('instrumenting multiple find operations', async () => {\n        await Promise.all([User.find({ id: '_test1' }), User.find({ id: '_test2' })]);\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(2);\n        assertSpan(spans[0] as ReadableSpan);\n        assertSpan(spans[1] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('find');\n        expect(spans[0].attributes[SemanticAttributes.DB_STATEMENT]).toMatch(/.*{\"id\":\"_test[1-2]\"}.*/g);\n        expect(spans[1].attributes[SemanticAttributes.DB_OPERATION]).toBe('find');\n        expect(spans[1].attributes[SemanticAttributes.DB_STATEMENT]).toMatch(/.*{\"id\":\"_test[1-2]\"}.*/g);\n    });\n\n    it('instrumenting find operation with chaining structures', async () => {\n        await User.find({ id: '_test' }).skip(1).limit(2).sort({ email: 'asc' });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('find');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.condition).toEqual({ id: '_test' });\n        expect(statement.options).toEqual({ skip: 1, limit: 2, sort: { email: 1 } });\n    });\n\n    it('instrumenting remove operation [deprecated]', async () => {\n        const user = await User.findOne({ email: 'john.doe@example.com' });\n        await user!.remove();\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(2);\n        assertSpan(spans[1] as ReadableSpan);\n        expect(spans[1].attributes[SemanticAttributes.DB_OPERATION]).toBe('remove');\n    });\n\n    it('instrumenting remove operation with callbacks [deprecated]', (done) => {\n        User.findOne({ email: 'john.doe@example.com' }).then((user) =>\n            user!.remove({ overwrite: true }, () => {\n                const spans = getTestSpans();\n                expect(spans.length).toBe(2);\n                assertSpan(spans[1] as ReadableSpan);\n                expect(spans[1].attributes[SemanticAttributes.DB_OPERATION]).toBe('remove');\n                expect(getStatement(spans[1] as ReadableSpan).options).toEqual({ overwrite: true });\n                done();\n            })\n        );\n    });\n\n    it('instrumenting deleteOne operation', async () => {\n        await User.deleteOne({ email: 'john.doe@example.com' });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('deleteOne');\n    });\n\n    it('instrumenting updateOne operation on models', async () => {\n        const user = await User.findOne({ email: 'john.doe@example.com' });\n        await user!.updateOne({ $inc: { age: 1 } }, { skip: 0 });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(2);\n        assertSpan(spans[1] as ReadableSpan);\n        expect(spans[1].attributes[SemanticAttributes.DB_OPERATION]).toBe('updateOne');\n\n        const statement = getStatement(spans[1] as ReadableSpan);\n        expect(statement.options).toEqual({ skip: 0 });\n        expect(statement.updates).toEqual({ $inc: { age: 1 } });\n        expect(statement.condition._id).toBeDefined();\n    });\n\n    it('instrumenting updateOne operation', async () => {\n        await User.updateOne({ email: 'john.doe@example.com' }, { $inc: { age: 1 } }, { skip: 0 });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('updateOne');\n\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.options).toEqual({ skip: 0 });\n        expect(statement.updates).toEqual({ $inc: { age: 1 } });\n        expect(statement.condition).toEqual({ email: 'john.doe@example.com' });\n    });\n\n    it('instrumenting count operation [deprecated]', async () => {\n        await User.count({});\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('count');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.options).toEqual({});\n        expect(statement.condition).toEqual({});\n    });\n\n    it('instrumenting countDocuments operation', async () => {\n        await User.countDocuments({ email: 'john.doe@example.com' });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('countDocuments');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.options).toEqual({});\n        expect(statement.condition).toEqual({ email: 'john.doe@example.com' });\n    });\n\n    it('instrumenting estimatedDocumentCount operation', async () => {\n        await User.estimatedDocumentCount();\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('estimatedDocumentCount');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.options).toEqual({});\n        expect(statement.condition).toEqual({});\n    });\n\n    it('instrumenting deleteMany operation', async () => {\n        await User.deleteMany();\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('deleteMany');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.options).toEqual({});\n        expect(statement.condition).toEqual({});\n    });\n\n    it('instrumenting findOne operation', async () => {\n        await User.findOne({ email: 'john.doe@example.com' });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('findOne');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.options).toEqual({});\n        expect(statement.condition).toEqual({ email: 'john.doe@example.com' });\n    });\n\n    it('instrumenting update operation [deprecated]', async () => {\n        await User.update({ email: 'john.doe@example.com' }, { email: 'john.doe2@example.com' });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('update');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.options).toEqual({});\n        expect(statement.condition).toEqual({ email: 'john.doe@example.com' });\n        expect(statement.updates).toEqual({ email: 'john.doe2@example.com' });\n    });\n\n    it('instrumenting updateOne operation', async () => {\n        await User.updateOne({ email: 'john.doe@example.com' }, { age: 55 });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('updateOne');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.options).toEqual({});\n        expect(statement.condition).toEqual({ email: 'john.doe@example.com' });\n        expect(statement.updates).toEqual({ age: 55 });\n    });\n\n    it('instrumenting updateMany operation', async () => {\n        await User.updateMany({ age: 18 }, { isDeleted: true });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('updateMany');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.options).toEqual({});\n        expect(statement.condition).toEqual({ age: 18 });\n        expect(statement.updates).toEqual({ isDeleted: true });\n    });\n\n    it('instrumenting findOneAndDelete operation', async () => {\n        await User.findOneAndDelete({ email: 'john.doe@example.com' });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('findOneAndDelete');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.options).toEqual({});\n        expect(statement.condition).toEqual({ email: 'john.doe@example.com' });\n    });\n\n    it('instrumenting findOneAndUpdate operation', async () => {\n        await User.findOneAndUpdate({ email: 'john.doe@example.com' }, { isUpdated: true });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(2);\n        assertSpan(spans[0] as ReadableSpan);\n        assertSpan(spans[1] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('findOne');\n        expect(spans[1].attributes[SemanticAttributes.DB_OPERATION]).toBe('findOneAndUpdate');\n        const statement = getStatement(spans[1] as ReadableSpan);\n        expect(statement.options).toEqual({});\n        expect(statement.condition).toEqual({ email: 'john.doe@example.com' });\n        expect(statement.updates).toEqual({ isUpdated: true });\n    });\n\n    it('instrumenting findOneAndRemove operation', async () => {\n        await User.findOneAndRemove({ email: 'john.doe@example.com' });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('findOneAndRemove');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.options).toEqual({});\n        expect(statement.condition).toEqual({ email: 'john.doe@example.com' });\n    });\n\n    it('instrumenting create operation', async () => {\n        const document = { firstName: 'John', lastName: 'Doe', email: 'john.doe+1@example.com' };\n        await User.create(document);\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('save');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.options).toEqual({});\n        expect(statement.document).toEqual(expect.objectContaining(document));\n    });\n\n    it('instrumenting aggregate operation', async () => {\n        await User.aggregate([\n            { $match: { firstName: 'John' } },\n            { $group: { _id: 'John', total: { $sum: '$amount' } } },\n        ]);\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('aggregate');\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.aggregatePipeline).toEqual([\n            { $match: { firstName: 'John' } },\n            { $group: { _id: 'John', total: { $sum: '$amount' } } },\n        ]);\n    });\n\n    it('instrumenting aggregate operation with callback', (done) => {\n        User.aggregate(\n            [{ $match: { firstName: 'John' } }, { $group: { _id: 'John', total: { $sum: '$amount' } } }],\n            () => {\n                const spans = getTestSpans();\n                expect(spans.length).toBe(1);\n                assertSpan(spans[0] as ReadableSpan);\n                expect(spans[0].attributes[SemanticAttributes.DB_OPERATION]).toBe('aggregate');\n                const statement = getStatement(spans[0] as ReadableSpan);\n                expect(statement.aggregatePipeline).toEqual([\n                    { $match: { firstName: 'John' } },\n                    { $group: { _id: 'John', total: { $sum: '$amount' } } },\n                ]);\n                done();\n            }\n        );\n    });\n\n    it('instrumenting combined operation with async/await', async () => {\n        await User.find({ id: '_test' }).skip(1).limit(2).sort({ email: 'asc' });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        const statement = getStatement(spans[0] as ReadableSpan);\n        expect(statement.condition).toEqual({ id: '_test' });\n        expect(statement.options).toEqual({ skip: 1, limit: 2, sort: { email: 1 } });\n    });\n\n    it('empty dbStatementSerializer does not create a statement attribute', async () => {\n        instrumentation.disable();\n        instrumentation.setConfig({ dbStatementSerializer: undefined });\n        instrumentation.enable();\n        await User.find({ id: '_test' });\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        expect(spans[0].attributes[SemanticAttributes.DB_STATEMENT]).toBe(undefined);\n    });\n\n    it('projection is sent to serializer', async () => {\n        instrumentation.disable();\n        instrumentation.setConfig({ dbStatementSerializer: (_operation: string, payload) => JSON.stringify(payload) });\n        instrumentation.enable();\n\n        const projection = { firstName: 1 };\n        await User.find({ id: '_test1' }, projection);\n\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        assertSpan(spans[0] as ReadableSpan);\n        const reqPayload = JSON.parse(spans[0].attributes[SemanticAttributes.DB_STATEMENT] as string);\n        expect(reqPayload.fields).toStrictEqual(projection);\n    });\n\n    describe('responseHook', () => {\n        const RESPONSE = 'db.response';\n        beforeEach(() => {\n            instrumentation.disable();\n            instrumentation.setConfig({\n                responseHook: (span, response) => span.setAttribute(RESPONSE, JSON.stringify(response)),\n            });\n            instrumentation.enable();\n        });\n\n        it('responseHook works with async/await in exec patch', async () => {\n            await User.deleteOne({ email: 'john.doe@example.com' });\n            const spans = getTestSpans();\n            expect(spans.length).toBe(1);\n            assertSpan(spans[0] as ReadableSpan);\n            expect(JSON.parse(spans[0].attributes[RESPONSE] as string)).toEqual({ n: 1, ok: 1, deletedCount: 1 });\n        });\n\n        it('responseHook works with callback in exec patch', (done) => {\n            User.deleteOne({ email: 'john.doe@example.com' }, { lean: 1 }, () => {\n                const spans = getTestSpans();\n                expect(spans.length).toBe(1);\n                assertSpan(spans[0] as ReadableSpan);\n                expect(JSON.parse(spans[0].attributes[RESPONSE] as string)).toEqual({\n                    n: 1,\n                    ok: 1,\n                    deletedCount: 1,\n                });\n                done();\n            });\n        });\n\n        it('responseHook works with async/await in model methods patch', async () => {\n            const document = {\n                firstName: 'Test first name',\n                lastName: 'Test last name',\n                email: 'test@example.com',\n            };\n            const user: IUser = new User(document);\n            const createdUser = await user.save();\n            const spans = getTestSpans();\n            expect(spans.length).toBe(1);\n            assertSpan(spans[0] as ReadableSpan);\n            expect(spans[0].attributes[RESPONSE]).toEqual(JSON.stringify(createdUser));\n        });\n\n        it('responseHook works with callback in model methods patch', (done) => {\n            const document = {\n                firstName: 'Test first name',\n                lastName: 'Test last name',\n                email: 'test@example.com',\n            };\n            const user: IUser = new User(document);\n            user.save((_err, createdUser) => {\n                const spans = getTestSpans();\n                expect(spans.length).toBe(1);\n                assertSpan(spans[0] as ReadableSpan);\n                expect(spans[0].attributes[RESPONSE]).toEqual(JSON.stringify(createdUser));\n                done();\n            });\n        });\n\n        it('responseHook works with async/await in aggregate patch', async () => {\n            await User.aggregate([\n                { $match: { firstName: 'John' } },\n                { $group: { _id: 'John', total: { $sum: '$amount' } } },\n            ]);\n\n            const spans = getTestSpans();\n            expect(spans.length).toBe(1);\n            assertSpan(spans[0] as ReadableSpan);\n            expect(JSON.parse(spans[0].attributes[RESPONSE] as string)).toEqual([{ _id: 'John', total: 0 }]);\n        });\n\n        it('responseHook works with callback in aggregate patch', (done) => {\n            User.aggregate(\n                [{ $match: { firstName: 'John' } }, { $group: { _id: 'John', total: { $sum: '$amount' } } }],\n                () => {\n                    const spans = getTestSpans();\n                    expect(spans.length).toBe(1);\n                    assertSpan(spans[0] as ReadableSpan);\n                    expect(JSON.parse(spans[0].attributes[RESPONSE] as string)).toEqual([{ _id: 'John', total: 0 }]);\n                    done();\n                }\n            );\n        });\n\n        it('error in response hook does not fail anything', async () => {\n            instrumentation.disable();\n            instrumentation.setConfig({\n                responseHook: () => {\n                    throw new Error('some error');\n                },\n            });\n            instrumentation.enable();\n            await User.deleteOne({ email: 'john.doe@example.com' });\n            const spans = getTestSpans();\n            expect(spans.length).toBe(1);\n            assertSpan(spans[0] as ReadableSpan);\n            expect(spans[0].attributes[RESPONSE]).toBe(undefined);\n        });\n    });\n\n    describe('moduleVersionAttributeName config', () => {\n        const VERSION_ATTR = 'module.version';\n        beforeEach(() => {\n            instrumentation.disable();\n            instrumentation.setConfig({\n                moduleVersionAttributeName: VERSION_ATTR,\n            });\n            instrumentation.enable();\n        });\n\n        it('moduleVersionAttributeName works with exec patch', async () => {\n            await User.deleteOne({ email: 'john.doe@example.com' });\n            const spans = getTestSpans();\n            expect(spans.length).toBe(1);\n            assertSpan(spans[0] as ReadableSpan);\n            expect(spans[0].attributes[VERSION_ATTR]).toMatch(/\\d{1,4}\\.\\d{1,4}\\.\\d{1,5}.*/);\n        });\n\n        it('moduleVersionAttributeName with model methods patch', async () => {\n            const document = {\n                firstName: 'Test first name',\n                lastName: 'Test last name',\n                email: 'test@example.com',\n            };\n            const user: IUser = new User(document);\n            await user.save();\n            const spans = getTestSpans();\n            expect(spans.length).toBe(1);\n            assertSpan(spans[0] as ReadableSpan);\n            expect(spans[0].attributes[VERSION_ATTR]).toMatch(/\\d{1,4}\\.\\d{1,4}\\.\\d{1,5}.*/);\n        });\n\n        it('moduleVersionAttributeName works with aggregate patch', async () => {\n            await User.aggregate([\n                { $match: { firstName: 'John' } },\n                { $group: { _id: 'John', total: { $sum: '$amount' } } },\n            ]);\n\n            const spans = getTestSpans();\n            expect(spans.length).toBe(1);\n            assertSpan(spans[0] as ReadableSpan);\n            expect(spans[0].attributes[VERSION_ATTR]).toMatch(/\\d{1,4}\\.\\d{1,4}\\.\\d{1,5}.*/);\n        });\n    });\n\n    describe('requireParentSpan', () => {\n        beforeEach(() => {\n            instrumentation.disable();\n            instrumentation.setConfig({\n                requireParentSpan: true,\n            });\n            instrumentation.enable();\n        });\n\n        it('should not start span on mongoose method', async () => {\n            await context.with(ROOT_CONTEXT, async () => {\n                const user: IUser = new User({\n                    firstName: 'Test first name',\n                    lastName: 'Test last name',\n                    email: 'test@example.com',\n                });\n                await user.save();\n            });\n\n            const spans = getTestSpans();\n            expect(spans.length).toBe(0);\n        });\n\n        it('should not start span on find', async () => {\n            await context.with(ROOT_CONTEXT, async () => {\n                await User.find({ id: '_test' });\n            });\n\n            const spans = getTestSpans();\n            expect(spans.length).toBe(0);\n        });\n\n        it('should not start span on aggregate', async () => {\n            await context.with(ROOT_CONTEXT, async () => {\n                await User.aggregate([\n                    { $match: { firstName: 'John' } },\n                    { $group: { _id: 'John', total: { $sum: '$amount' } } },\n                ]);\n            });\n\n            const spans = getTestSpans();\n            expect(spans.length).toBe(0);\n        });\n    });\n});\n"]}