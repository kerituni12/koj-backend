"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStatement = exports.assertSpan = void 0;
const expect_1 = __importDefault(require("expect"));
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const api_1 = require("@opentelemetry/api");
const assertSpan = (span) => {
    expect_1.default(span.status.code).toBe(api_1.SpanStatusCode.UNSET);
    expect_1.default(span.attributes[semantic_conventions_1.SemanticAttributes.DB_SYSTEM]).toEqual('mongodb');
    expect_1.default(span.attributes[semantic_conventions_1.SemanticAttributes.DB_MONGODB_COLLECTION]).toEqual('users');
    expect_1.default(span.attributes[semantic_conventions_1.SemanticAttributes.DB_NAME]).toEqual('test');
    expect_1.default(span.attributes[semantic_conventions_1.SemanticAttributes.NET_PEER_NAME]).toEqual('localhost');
    expect_1.default(span.attributes[semantic_conventions_1.SemanticAttributes.NET_PEER_PORT]).toEqual(27017);
    expect_1.default(span.attributes[semantic_conventions_1.SemanticAttributes.NET_TRANSPORT]).toEqual('IP.TCP');
};
exports.assertSpan = assertSpan;
const getStatement = (span) => JSON.parse(span.attributes[semantic_conventions_1.SemanticAttributes.DB_STATEMENT]);
exports.getStatement = getStatement;
//# sourceMappingURL=asserts.js.map