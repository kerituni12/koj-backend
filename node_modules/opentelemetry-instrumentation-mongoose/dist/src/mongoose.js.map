{"version":3,"file":"mongoose.js","sourceRoot":"","sources":["../../src/mongoose.ts"],"names":[],"mappings":"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","sourcesContent":["import { context, Span, trace, diag } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport type mongoose from 'mongoose';\nimport { MongooseInstrumentationConfig, SerializerPayload } from './types';\nimport { startSpan, handleCallbackResponse, handlePromiseResponse } from './utils';\nimport {\n    InstrumentationBase,\n    InstrumentationModuleDefinition,\n    InstrumentationNodeModuleDefinition,\n} from '@opentelemetry/instrumentation';\nimport { VERSION } from './version';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\n\nconst contextCaptureFunctions = [\n    'remove',\n    'deleteOne',\n    'deleteMany',\n    'find',\n    'findOne',\n    'estimatedDocumentCount',\n    'countDocuments',\n    'count',\n    'distinct',\n    'where',\n    '$where',\n    'findOneAndUpdate',\n    'findOneAndDelete',\n    'findOneAndReplace',\n    'findOneAndRemove',\n];\n\n// when mongoose functions are called, we store the original call context\n// and then set it as the parent for the spans created by Query/Aggregate exec()\n// calls. this bypass the unlinked spans issue on thenables await operations.\nexport const _STORED_PARENT_SPAN: unique symbol = Symbol('stored-parent-span');\n\nexport class MongooseInstrumentation extends InstrumentationBase<typeof mongoose> {\n    static readonly component = 'mongoose';\n    protected override _config: MongooseInstrumentationConfig;\n    private moduleVersion: string;\n\n    constructor(config: MongooseInstrumentationConfig = {}) {\n        super('opentelemetry-instrumentation-mongoose', VERSION, Object.assign({}, config));\n\n        // According to specification, statement is not set by default on mongodb spans.\n        if (!config.dbStatementSerializer) this._config.dbStatementSerializer = () => undefined;\n    }\n\n    override setConfig(config: MongooseInstrumentationConfig = {}) {\n        this._config = Object.assign({}, config);\n        if (!config.dbStatementSerializer) this._config.dbStatementSerializer = () => undefined;\n    }\n\n    protected init(): InstrumentationModuleDefinition<typeof mongoose> {\n        const module = new InstrumentationNodeModuleDefinition<typeof mongoose>(\n            MongooseInstrumentation.component,\n            ['*'],\n            this.patch.bind(this),\n            this.unpatch.bind(this)\n        );\n        return module;\n    }\n\n    protected patch(moduleExports: typeof mongoose, moduleVersion: string) {\n        diag.debug('mongoose instrumentation: patching');\n        this.moduleVersion = moduleVersion;\n\n        this._wrap(moduleExports.Model.prototype, 'save', this.patchOnModelMethods('save'));\n        this._wrap(moduleExports.Model.prototype, 'remove', this.patchOnModelMethods('remove'));\n        this._wrap(moduleExports.Query.prototype, 'exec', this.patchQueryExec());\n        this._wrap(moduleExports.Aggregate.prototype, 'exec', this.patchAggregateExec());\n\n        contextCaptureFunctions.forEach((funcName: string) => {\n            this._wrap(moduleExports.Query.prototype, funcName as any, this.patchAndCaptureSpanContext(funcName));\n        });\n        this._wrap(moduleExports.Model, 'aggregate', this.patchModelAggregate());\n\n        return moduleExports;\n    }\n\n    protected unpatch(moduleExports: typeof mongoose): void {\n        diag.debug('mongoose instrumentation: unpatch mongoose');\n        this._unwrap(moduleExports.Model.prototype, 'save');\n        this._unwrap(moduleExports.Model.prototype, 'remove');\n        this._unwrap(moduleExports.Query.prototype, 'exec');\n        this._unwrap(moduleExports.Aggregate.prototype, 'exec');\n\n        contextCaptureFunctions.forEach((funcName: string) => {\n            this._unwrap(moduleExports.Query.prototype, funcName as any);\n        });\n        this._unwrap(moduleExports.Model, 'aggregate');\n    }\n\n    private patchAggregateExec() {\n        const self = this;\n        diag.debug('mongoose instrumentation: patched mongoose Aggregate exec prototype');\n        return (originalAggregate: Function) => {\n            return function exec(this: any, callback?: Function) {\n                if (self._config.requireParentSpan && trace.getSpan(context.active()) === undefined) {\n                    return originalAggregate.apply(this, arguments);\n                }\n\n                const parentSpan = this[_STORED_PARENT_SPAN];\n                const attributes = {\n                    [SemanticAttributes.DB_STATEMENT]: self._config.dbStatementSerializer('aggregate', {\n                        options: this.options,\n                        aggregatePipeline: this._pipeline,\n                    }),\n                };\n\n                const span = startSpan({\n                    tracer: self.tracer,\n                    modelName: this._model?.modelName,\n                    operation: 'aggregate',\n                    attributes,\n                    collection: this._model.collection,\n                    parentSpan,\n                });\n                self._addModuleVersionIfNeeded(span);\n\n                return self._handleResponse(span, originalAggregate, this, arguments, callback);\n            };\n        };\n    }\n\n    private patchQueryExec() {\n        const self = this;\n        diag.debug('mongoose instrumentation: patched mongoose Query exec prototype');\n        return (originalExec: Function) => {\n            return function exec(this: any, callback?: Function) {\n                if (self._config.requireParentSpan && trace.getSpan(context.active()) === undefined) {\n                    return originalExec.apply(this, arguments);\n                }\n\n                const parentSpan = this[_STORED_PARENT_SPAN];\n                const attributes = {\n                    [SemanticAttributes.DB_STATEMENT]: self._config.dbStatementSerializer(this.op, {\n                        condition: this._conditions,\n                        updates: this._update,\n                        options: this.options,\n                        fields: this._fields,\n                    }),\n                };\n                const span = startSpan({\n                    tracer: self.tracer,\n                    modelName: this.model.modelName,\n                    operation: this.op,\n                    attributes,\n                    parentSpan,\n                    collection: this.mongooseCollection,\n                });\n                self._addModuleVersionIfNeeded(span);\n\n                return self._handleResponse(span, originalExec, this, arguments, callback);\n            };\n        };\n    }\n\n    private patchOnModelMethods(op: string) {\n        const self = this;\n        diag.debug(`mongoose instrumentation: patched mongoose Model ${op} prototype`);\n        return (originalOnModelFunction: Function) => {\n            return function method(this: any, options?: any, callback?: Function) {\n                if (self._config.requireParentSpan && trace.getSpan(context.active()) === undefined) {\n                    return originalOnModelFunction.apply(this, arguments);\n                }\n\n                const serializePayload: SerializerPayload = { document: this };\n                if (options && !(options instanceof Function)) {\n                    serializePayload.options = options;\n                }\n                const attributes = {\n                    [SemanticAttributes.DB_STATEMENT]: self._config.dbStatementSerializer(op, serializePayload),\n                };\n                const span = startSpan({\n                    tracer: self.tracer,\n                    modelName: this.constructor.modelName,\n                    operation: op,\n                    attributes,\n                    collection: this.constructor.collection,\n                });\n                self._addModuleVersionIfNeeded(span);\n\n                if (options instanceof Function) {\n                    callback = options;\n                    options = undefined;\n                }\n\n                return self._handleResponse(span, originalOnModelFunction, this, arguments, callback);\n            };\n        };\n    }\n\n    // we want to capture the otel span on the object which is calling exec.\n    // in the special case of aggregate, we need have no function to path\n    // on the Aggregate object to capture the context on, so we patch\n    // the aggregate of Model, and set the context on the Aggregate object\n    private patchModelAggregate() {\n        const self = this;\n        diag.debug(`mongoose instrumentation: patched mongoose model aggregate`);\n        return (original: Function) => {\n            return function captureSpanContext(this: any) {\n                const currentSpan = trace.getSpan(context.active());\n                const aggregate = self._callOriginalFunction(() => original.apply(this, arguments));\n                if (aggregate) aggregate[_STORED_PARENT_SPAN] = currentSpan;\n                return aggregate;\n            };\n        };\n    }\n\n    private patchAndCaptureSpanContext(funcName: string) {\n        const self = this;\n        diag.debug(`mongoose instrumentation: patched mongoose query ${funcName} prototype`);\n        return (original: Function) => {\n            return function captureSpanContext(this: any) {\n                this[_STORED_PARENT_SPAN] = trace.getSpan(context.active());\n                return self._callOriginalFunction(() => original.apply(this, arguments));\n            };\n        };\n    }\n\n    private _handleResponse(span: Span, exec: Function, originalThis: any, args: IArguments, callback?: Function) {\n        const self = this;\n        if (callback instanceof Function) {\n            return self._callOriginalFunction(() =>\n                handleCallbackResponse(callback, exec, originalThis, span, self._config.responseHook)\n            );\n        } else {\n            const response = self._callOriginalFunction(() => exec.apply(originalThis, args));\n            return handlePromiseResponse(response, span, self._config.responseHook);\n        }\n    }\n\n    private _callOriginalFunction<T>(originalFunction: (...args: any[]) => T): T {\n        if (this._config?.suppressInternalInstrumentation) {\n            return context.with(suppressTracing(context.active()), originalFunction);\n        } else {\n            return originalFunction();\n        }\n    }\n\n    private _addModuleVersionIfNeeded(span: Span) {\n        if (this._config.moduleVersionAttributeName) {\n            span.setAttribute(this._config.moduleVersionAttributeName, this.moduleVersion);\n        }\n    }\n}\n"]}