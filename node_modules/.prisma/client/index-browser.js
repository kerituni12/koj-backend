
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.9.2
 * Query Engine version: 8d8414deb360336e4698a65aa45a1fbaf1ce13d8
 */
Prisma.prismaVersion = {
  client: "3.9.2",
  engine: "8d8414deb360336e4698a65aa45a1fbaf1ce13d8"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  username: 'username',
  password: 'password',
  firstname: 'firstname',
  lastname: 'lastname',
  status: 'status',
  role: 'role',
  avatar: 'avatar',
  provider: 'provider',
  domainId: 'domainId',
  createdById: 'createdById',
  createdByUsername: 'createdByUsername',
  createdByName: 'createdByName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  extendData: 'extendData'
});

exports.Prisma.DomainScalarFieldEnum = makeEnum({
  id: 'id',
  domain: 'domain',
  domainId: 'domainId',
  status: 'status'
});

exports.Prisma.PostScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  content: 'content',
  published: 'published',
  authorId: 'authorId',
  domainId: 'domainId'
});

exports.Prisma.ChallengeScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  slug: 'slug',
  acceptedLanguages: 'acceptedLanguages',
  languages: 'languages',
  rate: 'rate',
  audience: 'audience',
  functionName: 'functionName',
  commentCount: 'commentCount',
  contestId: 'contestId',
  status: 'status',
  categoryId: 'categoryId',
  description: 'description',
  companyTags: 'companyTags',
  contributors: 'contributors',
  examples: 'examples',
  inputs: 'inputs',
  structs: 'structs',
  types: 'types',
  output: 'output',
  highlightSolutionCount: 'highlightSolutionCount',
  hint: 'hint',
  isFavorited: 'isFavorited',
  officalSolutionCount: 'officalSolutionCount',
  testcases: 'testcases',
  difficulty: 'difficulty',
  likes: 'likes',
  dislikes: 'dislikes',
  solutions: 'solutions',
  domainId: 'domainId',
  createdById: 'createdById',
  createdByUsername: 'createdByUsername',
  createdByName: 'createdByName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SubmissionScalarFieldEnum = makeEnum({
  id: 'id',
  languageId: 'languageId',
  challengeId: 'challengeId',
  content: 'content',
  result: 'result',
  info: 'info',
  ip: 'ip',
  shared: 'shared',
  domainId: 'domainId',
  createdById: 'createdById',
  createdByUsername: 'createdByUsername',
  createdAt: 'createdAt'
});

exports.Prisma.SubmissionContestScalarFieldEnum = makeEnum({
  id: 'id',
  languageId: 'languageId',
  contestId: 'contestId',
  challengeId: 'challengeId',
  content: 'content',
  result: 'result',
  ip: 'ip',
  shared: 'shared',
  domainId: 'domainId',
  createdById: 'createdById',
  createdByUsername: 'createdByUsername',
  createdAt: 'createdAt'
});

exports.Prisma.SubmissionStatisticScalarFieldEnum = makeEnum({
  id: 'id',
  challengeId: 'challengeId',
  languageId: 'languageId',
  score: 'score',
  submitCount: 'submitCount',
  info: 'info',
  domainId: 'domainId',
  createdById: 'createdById',
  createdByUsername: 'createdByUsername',
  lastSubmitTime: 'lastSubmitTime'
});

exports.Prisma.SubmissionContestStatisticScalarFieldEnum = makeEnum({
  id: 'id',
  contestId: 'contestId',
  info: 'info',
  domainId: 'domainId',
  createdById: 'createdById'
});

exports.Prisma.CategoryScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  slug: 'slug',
  status: 'status',
  domainId: 'domainId'
});

exports.Prisma.TopicTagScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  slug: 'slug',
  status: 'status',
  domainId: 'domainId'
});

exports.Prisma.LanguageScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  extension: 'extension',
  statusId: 'statusId'
});

exports.Prisma.StatusScalarFieldEnum = makeEnum({
  id: 'id',
  description: 'description',
  type: 'type'
});

exports.Prisma.GroupScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  key: 'key',
  status: 'status',
  description: 'description',
  domainId: 'domainId',
  createdById: 'createdById',
  createdByUsername: 'createdByUsername',
  createdByName: 'createdByName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.RoleScalarFieldEnum = makeEnum({
  id: 'id',
  key: 'key',
  name: 'name',
  description: 'description',
  domainId: 'domainId',
  createdById: 'createdById',
  createdByUsername: 'createdByUsername',
  createdByName: 'createdByName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.PolicyScalarFieldEnum = makeEnum({
  id: 'id',
  ptype: 'ptype',
  subject: 'subject',
  object: 'object',
  action: 'action',
  effect: 'effect',
  effectWith: 'effectWith',
  condition: 'condition',
  domainId: 'domainId',
  createdById: 'createdById',
  createdByUsername: 'createdByUsername',
  createdByName: 'createdByName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.RoleGroupScalarFieldEnum = makeEnum({
  id: 'id',
  ptype: 'ptype',
  role: 'role',
  rule: 'rule',
  domainId: 'domainId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Domain: 'Domain',
  Post: 'Post',
  Challenge: 'Challenge',
  Submission: 'Submission',
  SubmissionContest: 'SubmissionContest',
  SubmissionStatistic: 'SubmissionStatistic',
  SubmissionContestStatistic: 'SubmissionContestStatistic',
  Category: 'Category',
  TopicTag: 'TopicTag',
  Language: 'Language',
  Status: 'Status',
  Group: 'Group',
  Role: 'Role',
  Policy: 'Policy',
  RoleGroup: 'RoleGroup'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
