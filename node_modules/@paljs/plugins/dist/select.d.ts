import { GraphQLResolveInfo } from 'graphql';
import { DMMF } from '@prisma/client/runtime';
/**
 * Convert `info` to select object accepted by `prisma client`.
 * @param info - GraphQLResolveInfo.
 * @example
 * // Graphql query
 * {
 *    findManyUser{
 *      id
 *      posts(where: { title: { contains: "a" } }, first: 10) {
 *        id
 *        comments{
 *          id
 *        }
 *      }
 *    }
 * }
 * // convert to
 * {
 *  select: {
 *    id: true,
 *    posts: {
 *      select: { id: true, comments: { select: { id: true } } },
 *      where: { title: { contains: "a" } },
 *      first: 10
 *    }
 *  }
 * }
 *
 * // Use
 *
 * const select = new PrismaSelect(info);
 *
 * prisma.user.findMany({
 *  ...args,
 *  ...select.value,
 * })
 *
 **/
export declare class PrismaSelect {
    private info;
    private options?;
    private availableArgs;
    private allowedProps;
    private isAggregate;
    constructor(info: GraphQLResolveInfo, options?: {
        defaultFields?: {
            [key: string]: {
                [key: string]: boolean;
            } | ((select: any) => {
                [key: string]: boolean;
            });
        } | undefined;
        dmmf?: DMMF.Document[] | undefined;
    } | undefined);
    get value(): any;
    get dataModel(): DMMF.Model[];
    get defaultFields(): {
        [key: string]: {
            [key: string]: boolean;
        } | ((select: any) => {
            [key: string]: boolean;
        });
    } | undefined;
    private get fields();
    private static getModelMap;
    private model;
    private field;
    static isObject(item: any): boolean;
    static mergeDeep(target: any, ...sources: any[]): any;
    /**
     * Get nested value from select object.
     * @param field - name of field in select object.
     * @param filterBy - Model name as you have in schema.prisma file.
     * @param mergeObject
     * @example
     * // Graphql query
     * {
     *    findManyUser{
     *      id
     *      posts{
     *        id
     *        comments{
     *          id
     *        }
     *      }
     *    }
     * }
     *
     * // when you need to get more nested fields just add `.`
     * PrismaSelect.valueOf('posts.comments', 'Comment');
     * // return
     * { select: { id: true } }
     *
     * PrismaSelect.valueOf('posts', 'Post');
     *
     * // return
     * { select: { id: true, comments: { select: { id: true } } } }
     *
     **/
    valueOf(field: string, filterBy?: string, mergeObject?: any): any;
    /**
     * Work with this method if your GraphQL type name not like Schema model name.
     * @param modelName - Model name as you have in schema.prisma file.
     * @example
     * // normal call
     * const select = new PrismaSelect(info).value
     *
     * // With filter will filter select object with provided schema model name
     * const select = new PrismaSelect(info).valueWithFilter('User');
     *
     **/
    valueWithFilter(modelName: string): any;
    private filterBy;
    private getSelect;
}
