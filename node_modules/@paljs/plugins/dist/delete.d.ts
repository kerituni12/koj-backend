import { DMMF } from '@prisma/client/runtime';
export interface onDeleteArgs {
    model: string;
    where?: any;
    deleteParent?: boolean;
}
interface BatchPayload {
    count: number;
}
/**
 * Handle all relation onDelete type
 * @param prisma - optional arg you can send your client class.
 * @param options - optional arg you can send your custom options { dmmf?: DMMF.Document }.
 * @example
 * const prisma = new PrismaClient({log: ['query']});
 * const prismaDelete = new PrismaDelete(prisma);
 *
 * // or new PrismaDelete(); we will create new client and use
 *
 * // use onDelete method
 * prismaDelete.onDelete({
 *  model: 'User',
 *  where: { id: 1 },
 *  deleteParent: true // if true will also delete user record default false
 * });
 *
 **/
export declare class PrismaDelete {
    private prisma;
    private options?;
    constructor(prisma: any, options?: {
        dmmf?: DMMF.Document | undefined;
    } | undefined);
    get getDMMF(): DMMF.Document;
    get dataModel(): DMMF.Datamodel;
    private getModel;
    private static getModelName;
    private getFieldByType;
    private getModelIdFieldName;
    private getOnDeleteFields;
    private setFieldNull;
    private getDeleteArray;
    /**
     * Handle all relation onDelete type
     * @param onDeleteArgs - Object with model data.
     * @return count of deleted records if deleteParent is true
     * @example
     * const prismaDelete = new PrismaDelete();
     * prismaDelete.onDelete({
     *  model: 'User',
     *  where: { id: 1 },
     *  deleteParent: true // if true will also delete user record default false
     * });
     *
     **/
    onDelete({ model, where, deleteParent, }: onDeleteArgs): Promise<BatchPayload | void>;
}
export {};
