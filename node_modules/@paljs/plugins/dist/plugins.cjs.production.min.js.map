{"version":3,"file":"plugins.cjs.production.min.js","sources":["../src/select.ts","../../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/sdlInputs.ts","../src/delete.ts"],"sourcesContent":["import { GraphQLResolveInfo } from 'graphql';\nimport { DMMF } from '@prisma/client/runtime';\n// @ts-ignore\nimport graphqlFields from 'graphql-fields';\n\n/**\n * Convert `info` to select object accepted by `prisma client`.\n * @param info - GraphQLResolveInfo.\n * @example\n * // Graphql query\n * {\n *    findManyUser{\n *      id\n *      posts(where: { title: { contains: \"a\" } }, first: 10) {\n *        id\n *        comments{\n *          id\n *        }\n *      }\n *    }\n * }\n * // convert to\n * {\n *  select: {\n *    id: true,\n *    posts: {\n *      select: { id: true, comments: { select: { id: true } } },\n *      where: { title: { contains: \"a\" } },\n *      first: 10\n *    }\n *  }\n * }\n *\n * // Use\n *\n * const select = new PrismaSelect(info);\n *\n * prisma.user.findMany({\n *  ...args,\n *  ...select.value,\n * })\n *\n **/\nexport class PrismaSelect {\n  private availableArgs = ['where', 'orderBy', 'skip', 'cursor', 'take'];\n  private allowedProps = ['_count'];\n  private isAggregate: boolean = false;\n\n  constructor(\n    private info: GraphQLResolveInfo,\n    private options?: {\n      defaultFields?: {\n        [key: string]:\n          | { [key: string]: boolean }\n          | ((select: any) => { [key: string]: boolean });\n      };\n      dmmf?: DMMF.Document[];\n    },\n  ) {}\n\n  get value() {\n    const returnType = this.info.returnType\n      .toString()\n      .replace(/]/g, '')\n      .replace(/\\[/g, '')\n      .replace(/!/g, '');\n    this.isAggregate = returnType.includes('Aggregate');\n    return this.valueWithFilter(returnType);\n  }\n\n  get dataModel() {\n    const models: DMMF.Model[] = [];\n    if (this.options?.dmmf) {\n      this.options?.dmmf.forEach((doc) => {\n        models.push(...doc.datamodel.models);\n      });\n    } else {\n      const { Prisma } = require('@prisma/client');\n      if (Prisma.dmmf && Prisma.dmmf.datamodel) {\n        models.push(...Prisma.dmmf.datamodel.models);\n      }\n    }\n    return models;\n  }\n\n  get defaultFields() {\n    return this.options?.defaultFields;\n  }\n\n  private get fields() {\n    return graphqlFields(\n      this.info,\n      {},\n      {\n        excludedFields: ['__typename'],\n        processArguments: true,\n      },\n    );\n  }\n\n  private static getModelMap(docs?: string, name?: string) {\n    const value = docs?.match(/@PrismaSelect.map\\(\\[(.*?)\\]\\)/);\n    if (value && name) {\n      const asArray = value[1]\n        .replace(/ /g, '')\n        .split(',')\n        .filter((v) => v);\n      return asArray.includes(name);\n    }\n    return false;\n  }\n\n  private model(name?: string) {\n    return this.dataModel.find(\n      (item) =>\n        item.name === name ||\n        PrismaSelect.getModelMap(item.documentation, name),\n    );\n  }\n\n  private field(name: string, model?: DMMF.Model) {\n    return model?.fields.find((item) => item.name === name);\n  }\n\n  static isObject(item: any) {\n    return item && typeof item === 'object' && !Array.isArray(item);\n  }\n\n  static mergeDeep(target: any, ...sources: any[]): any {\n    if (!sources.length) return target;\n    const source: any = sources.shift();\n\n    if (PrismaSelect.isObject(target) && PrismaSelect.isObject(source)) {\n      for (const key in source) {\n        if (PrismaSelect.isObject(source[key])) {\n          if (!target[key]) Object.assign(target, { [key]: {} });\n          PrismaSelect.mergeDeep(target[key], source[key]);\n        } else {\n          Object.assign(target, { [key]: source[key] });\n        }\n      }\n    }\n\n    return PrismaSelect.mergeDeep(target, ...sources);\n  }\n\n  /**\n   * Get nested value from select object.\n   * @param field - name of field in select object.\n   * @param filterBy - Model name as you have in schema.prisma file.\n   * @param mergeObject\n   * @example\n   * // Graphql query\n   * {\n   *    findManyUser{\n   *      id\n   *      posts{\n   *        id\n   *        comments{\n   *          id\n   *        }\n   *      }\n   *    }\n   * }\n   *\n   * // when you need to get more nested fields just add `.`\n   * PrismaSelect.valueOf('posts.comments', 'Comment');\n   * // return\n   * { select: { id: true } }\n   *\n   * PrismaSelect.valueOf('posts', 'Post');\n   *\n   * // return\n   * { select: { id: true, comments: { select: { id: true } } } }\n   *\n   **/\n  valueOf(field: string, filterBy?: string, mergeObject: any = {}) {\n    const splitItem = field.split('.');\n    let newValue = this.getSelect(this.fields);\n    for (const field of splitItem) {\n      if (this.isAggregate && newValue.hasOwnProperty(field)) {\n        newValue = newValue[field];\n      } else if (\n        !this.isAggregate &&\n        newValue.hasOwnProperty('select') &&\n        newValue.select.hasOwnProperty(field)\n      ) {\n        newValue = newValue.select[field];\n      } else {\n        return {};\n      }\n    }\n    return filterBy\n      ? PrismaSelect.mergeDeep(this.filterBy(filterBy, newValue), mergeObject)\n      : newValue;\n  }\n\n  /**\n   * Work with this method if your GraphQL type name not like Schema model name.\n   * @param modelName - Model name as you have in schema.prisma file.\n   * @example\n   * // normal call\n   * const select = new PrismaSelect(info).value\n   *\n   * // With filter will filter select object with provided schema model name\n   * const select = new PrismaSelect(info).valueWithFilter('User');\n   *\n   **/\n  valueWithFilter(modelName: string) {\n    return this.filterBy(modelName, this.getSelect(this.fields));\n  }\n\n  private filterBy(modelName: string, selectObject: any) {\n    const model = this.model(modelName);\n    if (model && typeof selectObject === 'object') {\n      let defaultFields = {};\n      if (this.defaultFields && this.defaultFields[modelName]) {\n        const modelFields = this.defaultFields[modelName];\n        defaultFields =\n          typeof modelFields === 'function'\n            ? modelFields(selectObject.select)\n            : modelFields;\n      }\n      const filteredObject = {\n        ...selectObject,\n        select: { ...defaultFields },\n      };\n      Object.keys(selectObject.select).forEach((key) => {\n        if (this.allowedProps.includes(key)) {\n          filteredObject.select[key] = selectObject.select[key];\n        } else {\n          const field = this.field(key, model);\n          if (field) {\n            if (field.kind !== 'object') {\n              filteredObject.select[key] = true;\n            } else {\n              const subModelFilter = this.filterBy(\n                field.type.toString(),\n                selectObject.select[key],\n              );\n              if (Object.keys(subModelFilter.select).length > 0) {\n                filteredObject.select[key] = subModelFilter;\n              }\n            }\n          }\n        }\n      });\n      return filteredObject;\n    } else {\n      return selectObject;\n    }\n  }\n\n  private getSelect(fields: any) {\n    const selectObject: any = this.isAggregate ? {} : { select: {} };\n    Object.keys(fields).forEach((key) => {\n      if (Object.keys(fields[key]).length === 0) {\n        if (this.isAggregate) {\n          selectObject[key] = true;\n        } else {\n          selectObject.select[key] = true;\n        }\n      } else if (key === '__arguments') {\n        fields[key].forEach((arg: any) => {\n          Object.keys(arg).forEach((key2) => {\n            if (this.availableArgs.includes(key2)) {\n              selectObject[key2] = arg[key2].value;\n            }\n          });\n        });\n      } else {\n        if (this.isAggregate) {\n          selectObject[key] = this.getSelect(fields[key]);\n        } else {\n          selectObject.select[key] = this.getSelect(fields[key]);\n        }\n      }\n    });\n    return selectObject;\n  }\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { DMMF } from '@prisma/client/runtime';\nimport { GraphQLSchema } from 'graphql';\nimport { writeFileSync } from 'fs';\n\ninterface OptionsType {\n  dmmf?: DMMF.Document;\n  excludeFields?: string[];\n  filterInputs?: (input: DMMF.InputType) => DMMF.SchemaArg[];\n  doNotUseFieldUpdateOperationsInput?: boolean;\n}\n\nconst testedTypes: string[] = [];\n\nexport const hasEmptyTypeFields = (type: string, options?: OptionsType) => {\n  let schema = options?.dmmf?.schema;\n  if (!schema) {\n    const { Prisma } = require('@prisma/client');\n    schema = Prisma.dmmf?.schema;\n  }\n  testedTypes.push(type);\n  const inputObjectTypes = schema ? [...schema?.inputObjectTypes.prisma] : [];\n  if (schema?.inputObjectTypes.model)\n    inputObjectTypes.push(...schema.inputObjectTypes.model);\n\n  const inputType = inputObjectTypes.find((item) => item.name === type);\n  if (inputType) {\n    if (inputType.fields.length === 0) return true;\n    for (const field of inputType.fields) {\n      const fieldType = getInputType(field, options);\n      if (\n        fieldType.type !== type &&\n        fieldType.location === 'inputObjectTypes' &&\n        !testedTypes.includes(fieldType.type as string)\n      ) {\n        const state = hasEmptyTypeFields(fieldType.type as string, options);\n        if (state) return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport const getInputType = (\n  field: DMMF.SchemaArg,\n  options?: { doNotUseFieldUpdateOperationsInput?: boolean },\n) => {\n  let index: number = 0;\n  if (\n    options?.doNotUseFieldUpdateOperationsInput &&\n    field.inputTypes.length > 1 &&\n    (field.inputTypes[1].type as string).endsWith('FieldUpdateOperationsInput')\n  ) {\n    return field.inputTypes[index];\n  }\n  if (\n    field.inputTypes.length > 1 &&\n    (field.inputTypes[1].location === 'inputObjectTypes' ||\n      field.inputTypes[1].isList ||\n      field.inputTypes[1].type === 'Json')\n  ) {\n    index = 1;\n  }\n  return field.inputTypes[index];\n};\n\nexport function generateInputsString(options?: OptionsType) {\n  let schema = options?.dmmf?.schema;\n  if (!schema) {\n    const { Prisma } = require('@prisma/client');\n    schema = Prisma.dmmf?.schema;\n  }\n  let fileContent = `\n  scalar DateTime\n  \n  type BatchPayload {\n  count: Int!\n}\n`;\n  if (schema) {\n    const enums = [...schema.enumTypes.prisma];\n    if (schema.enumTypes.model) enums.push(...schema.enumTypes.model);\n    enums.forEach((item) => {\n      fileContent += `enum ${item.name} {`;\n      item.values.forEach((item2) => {\n        fileContent += `\n        ${item2}`;\n      });\n      fileContent += `}\n  \n  `;\n    });\n    const inputObjectTypes = [...schema.inputObjectTypes.prisma];\n    if (schema.inputObjectTypes.model)\n      inputObjectTypes.push(...schema.inputObjectTypes.model);\n\n    inputObjectTypes.forEach((input) => {\n      if (input.fields.length > 0) {\n        fileContent += `input ${input.name} {\n      `;\n        const inputFields =\n          typeof options?.filterInputs === 'function'\n            ? options.filterInputs(input)\n            : input.fields;\n        inputFields\n          .filter((field) => !options?.excludeFields?.includes(field.name))\n          .forEach((field) => {\n            const inputType = getInputType(field, options);\n            const hasEmptyType =\n              inputType.location === 'inputObjectTypes' &&\n              hasEmptyTypeFields(inputType.type as string, options);\n            if (!hasEmptyType) {\n              fileContent += `${field.name}: ${\n                inputType.isList ? `[${inputType.type}!]` : inputType.type\n              }${field.isRequired ? '!' : ''}\n        `;\n            }\n          });\n        fileContent += `}\n    \n  `;\n      }\n    });\n\n    schema?.outputObjectTypes.prisma\n      .filter(\n        (type) =>\n          type.name.includes('Aggregate') ||\n          type.name.endsWith('CountOutputType'),\n      )\n      .forEach((type) => {\n        fileContent += `type ${type.name} {\n      `;\n        type.fields\n          .filter((field) => !options?.excludeFields?.includes(field.name))\n          .forEach((field) => {\n            fileContent += `${field.name}: ${\n              field.outputType.isList\n                ? `[${field.outputType.type}!]`\n                : field.outputType.type\n            }${!field.isNullable ? '!' : ''}\n        `;\n          });\n        fileContent += `}\n    \n  `;\n      });\n  }\n  return fileContent;\n}\n\nexport const sdlInputs = (options?: OptionsType) => {\n  const gql = require('graphql-tag');\n  return gql`\n    ${generateInputsString(options)}\n  `;\n};\n\nexport const generateGraphQlSDLFile = (\n  schema: GraphQLSchema,\n  path: string = 'schema.graphql',\n) => {\n  const { printSchema } = require('graphql');\n  writeFileSync(path, printSchema(schema));\n};\n","import { DMMF } from '@prisma/client/runtime';\n\ninterface DeleteData {\n  name: string;\n  where: object;\n}\n\nexport interface onDeleteArgs {\n  model: string;\n  where?: any;\n  deleteParent?: boolean;\n}\n\ninterface BatchPayload {\n  count: number;\n}\n\n/**\n * Handle all relation onDelete type\n * @param prisma - optional arg you can send your client class.\n * @param options - optional arg you can send your custom options { dmmf?: DMMF.Document }.\n * @example\n * const prisma = new PrismaClient({log: ['query']});\n * const prismaDelete = new PrismaDelete(prisma);\n *\n * // or new PrismaDelete(); we will create new client and use\n *\n * // use onDelete method\n * prismaDelete.onDelete({\n *  model: 'User',\n *  where: { id: 1 },\n *  deleteParent: true // if true will also delete user record default false\n * });\n *\n **/\nexport class PrismaDelete {\n  constructor(\n    private prisma: any,\n    private options?: { dmmf?: DMMF.Document },\n  ) {}\n\n  get getDMMF(): DMMF.Document {\n    const { Prisma } = require('@prisma/client');\n    return Prisma.dmmf;\n  }\n\n  get dataModel() {\n    if (this.options?.dmmf) {\n      return this.options?.dmmf?.datamodel;\n    } else {\n      return this.getDMMF?.datamodel;\n    }\n  }\n\n  private getModel(modelName: string) {\n    return this.dataModel?.models.find((item) => item.name === modelName);\n  }\n\n  private static getModelName(modelName: string) {\n    return modelName.charAt(0).toLowerCase() + modelName.slice(1);\n  }\n\n  private getFieldByType(modelName: string, fieldType: string) {\n    return this.getModel(modelName)?.fields.find(\n      (item) => item.type === fieldType && !item.isList,\n    );\n  }\n\n  private getModelIdFieldName(modelName: string) {\n    return this.getModel(modelName)?.fields.find((item) => item.isId)?.name;\n  }\n\n  private getOnDeleteFields(modelName: string, type: 'SET_NULL' | 'CASCADE') {\n    return this.getModel(modelName)?.fields.filter(\n      (item) =>\n        item.documentation?.includes('@onDelete') &&\n        item.documentation?.includes(type),\n    );\n  }\n\n  private async setFieldNull(modelName: string, field: DMMF.Field, where: any) {\n    const name = PrismaDelete.getModelName(modelName);\n    const modelId = this.getModelIdFieldName(modelName);\n    const fieldModelId = this.getModelIdFieldName(field.type.toString());\n    if (modelId && fieldModelId && !field.isRequired) {\n      const fieldSelect = field.isList\n        ? { [field.name]: { select: { [fieldModelId]: true } } }\n        : {};\n      const results = await this.prisma[name].findMany({\n        where,\n        select: {\n          [modelId]: true,\n          ...fieldSelect,\n        },\n      });\n      for (const result of results) {\n        if (!(field.isList && result[field.name].length === 0)) {\n          await this.prisma[name].update({\n            where: {\n              [modelId]: result[modelId],\n            },\n            data: {\n              [field.name]: {\n                disconnect: field.isList ? result[field.name] : true,\n              },\n            },\n          });\n        }\n      }\n    }\n  }\n\n  private async getDeleteArray(\n    modelName: string,\n    whereInput: any,\n    includeParent = true,\n  ) {\n    const deleteArray: DeleteData[] = includeParent\n      ? [\n          {\n            name: PrismaDelete.getModelName(modelName),\n            where: whereInput,\n          },\n        ]\n      : [];\n\n    const nullFields = this.getOnDeleteFields(modelName, 'SET_NULL');\n    if (nullFields) {\n      for (const nullField of nullFields) {\n        await this.setFieldNull(modelName, nullField, whereInput);\n      }\n    }\n\n    const cascadeFields = this.getOnDeleteFields(modelName, 'CASCADE');\n    if (cascadeFields) {\n      for (const cascadeField of cascadeFields) {\n        const childField = this.getFieldByType(\n          cascadeField.type.toString(),\n          modelName,\n        );\n        if (childField) {\n          if (cascadeField.type !== modelName) {\n            deleteArray.push(\n              ...(await this.getDeleteArray(cascadeField.type.toString(), {\n                [childField.name]: whereInput,\n              })),\n            );\n          } else {\n            deleteArray.push({\n              name: PrismaDelete.getModelName(modelName),\n              where: {\n                [childField.name]: whereInput,\n              },\n            });\n          }\n        }\n      }\n    }\n\n    return deleteArray;\n  }\n  /**\n   * Handle all relation onDelete type\n   * @param onDeleteArgs - Object with model data.\n   * @return count of deleted records if deleteParent is true\n   * @example\n   * const prismaDelete = new PrismaDelete();\n   * prismaDelete.onDelete({\n   *  model: 'User',\n   *  where: { id: 1 },\n   *  deleteParent: true // if true will also delete user record default false\n   * });\n   *\n   **/\n  async onDelete({\n    model,\n    where,\n    deleteParent,\n  }: onDeleteArgs): Promise<BatchPayload | void> {\n    const results = (\n      await this.getDeleteArray(model, where, !!deleteParent)\n    ).reverse();\n    for (let i = 0; i < results.length; ++i) {\n      if (i + 1 === results.length && deleteParent) {\n        return await this.prisma[results[i].name].deleteMany({\n          where: results[i].where,\n        });\n      } else {\n        await this.prisma[results[i].name].deleteMany({\n          where: results[i].where,\n        });\n      }\n    }\n  }\n}\n"],"names":["PrismaSelect","info","options","getModelMap","docs","name","value","match","replace","split","filter","v","includes","model","this","dataModel","find","item","documentation","field","fields","isObject","Array","isArray","mergeDeep","target","sources","length","source","shift","key","Object","assign","valueOf","filterBy","mergeObject","splitItem","newValue","getSelect","isAggregate","hasOwnProperty","select","valueWithFilter","modelName","selectObject","defaultFields","modelFields","filteredObject","keys","forEach","_this","allowedProps","kind","subModelFilter","type","toString","_this2","arg","key2","availableArgs","returnType","models","_this$options","dmmf","doc","push","datamodel","Prisma","require","_this$options3","graphqlFields","excludedFields","processArguments","_Pact","prototype","then","onFulfilled","onRejected","result","state","s","callback","_settle","e","o","pact","bind","observer","_isSettledPact","thenable","_forTo","array","body","check","reject","i","_cycle","_iteratorSymbol","Symbol","iterator","_forOf","step","next","done","_fixup","TypeError","values","asyncIterator","testedTypes","hasEmptyTypeFields","schema","_options$dmmf","_Prisma$dmmf","inputObjectTypes","_schema","prisma","_schema2","inputType","fieldType","getInputType","location","index","doNotUseFieldUpdateOperationsInput","inputTypes","endsWith","isList","generateInputsString","_options$dmmf2","_Prisma$dmmf2","fileContent","enums","enumTypes","item2","input","filterInputs","excludeFields","_options$excludeField","isRequired","outputObjectTypes","_options$excludeField2","outputType","isNullable","getModel","_this$dataModel","getModelName","charAt","toLowerCase","slice","getFieldByType","_this$getModel","getModelIdFieldName","_this$getModel2","isId","_this$getModel2$field","getOnDeleteFields","_this$getModel3","_item$documentation2","setFieldNull","where","PrismaDelete","modelId","fieldModelId","fieldSelect","findMany","results","update","data","disconnect","getDeleteArray","whereInput","includeParent","cascadeFields","_this4","cascadeField","childField","deleteArray","nullFields","nullField","onDelete","deleteParent","_this6","_this5$getDeleteArray","reverse","deleteMany","_this$options2","_this$options2$dmmf","getDMMF","_this$getDMMF","path","writeFileSync","printSchema","gql"],"mappings":"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"}