"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraceClientProxy = void 0;
const api_1 = require("@opentelemetry/api");
const common_1 = require("@nestjs/common");
const rxjs_1 = require("rxjs");
let TraceClientProxy = class TraceClientProxy {
    async send(client, pattern, payload) {
        const span = api_1.trace.getSpan(api_1.context.active());
        if (span?.spanContext()) {
            api_1.propagation.inject(api_1.context.active(), payload, api_1.defaultTextMapSetter);
        }
        const res = await (0, rxjs_1.lastValueFrom)(client.send(pattern, payload).pipe((0, rxjs_1.map)((data) => data)));
        return res;
    }
};
TraceClientProxy = __decorate([
    (0, common_1.Injectable)()
], TraceClientProxy);
exports.TraceClientProxy = TraceClientProxy;
//# sourceMappingURL=TraceClientProxy.js.map