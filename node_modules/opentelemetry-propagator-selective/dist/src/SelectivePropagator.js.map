{"version":3,"file":"SelectivePropagator.js","sourceRoot":"","sources":["../../src/SelectivePropagator.ts"],"names":[],"mappings":";;;AAGA,MAAa,mBAAmB;IAC5B,YAAoB,UAA6B,EAAU,SAAoC,EAAE;QAA7E,eAAU,GAAV,UAAU,CAAmB;QAAU,WAAM,GAAN,MAAM,CAAgC;IAAG,CAAC;IAErG,MAAM,CAAC,OAAgB,EAAE,OAAY,EAAE,MAA0B;QAC7D,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa;YAAE,OAAO;QACvC,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IAC5D,CAAC;IAED,OAAO,CAAC,OAAgB,EAAE,OAAY,EAAE,MAA0B;QAC9D,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc;YAAE,OAAO,OAAO,CAAC;QAChD,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IAC7D,CAAC;IAED,MAAM;QACF,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;IACpC,CAAC;CACJ;AAhBD,kDAgBC","sourcesContent":["import { Context, TextMapGetter, TextMapPropagator, TextMapSetter } from '@opentelemetry/api';\nimport { SelectivePropagatorConfig } from './types';\n\nexport class SelectivePropagator implements TextMapPropagator {\n    constructor(private propagator: TextMapPropagator, private config: SelectivePropagatorConfig = {}) {}\n\n    inject(context: Context, carrier: any, setter: TextMapSetter<any>): void {\n        if (!this.config.injectEnabled) return;\n        return this.propagator.inject(context, carrier, setter);\n    }\n\n    extract(context: Context, carrier: any, getter: TextMapGetter<any>): Context {\n        if (!this.config.extractEnabled) return context;\n        return this.propagator.extract(context, carrier, getter);\n    }\n\n    fields(): string[] {\n        return this.propagator.fields();\n    }\n}\n"]}