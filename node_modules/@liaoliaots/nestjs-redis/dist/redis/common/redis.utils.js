"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.quitClients = exports.displayErrorLog = exports.displayReadyLog = exports.createClient = void 0;
const tslib_1 = require("tslib");
const ioredis_1 = tslib_1.__importDefault(require("ioredis"));
const messages_1 = require("../../messages");
const redis_logger_1 = require("../redis-logger");
const utils_1 = require("../../utils");
const constants_1 = require("../../constants");
const createClient = (clientOptions) => {
    // eslint-disable-next-line deprecation/deprecation, @typescript-eslint/no-unused-vars
    const { namespace, url, path, onClientCreated } = clientOptions, redisOptions = tslib_1.__rest(clientOptions, ["namespace", "url", "path", "onClientCreated"]);
    let client;
    if (url)
        client = new ioredis_1.default(url, redisOptions);
    else if (path)
        client = new ioredis_1.default(path, redisOptions);
    else
        client = new ioredis_1.default(redisOptions);
    if (onClientCreated)
        onClientCreated(client);
    return client;
};
exports.createClient = createClient;
const displayReadyLog = (clients) => {
    clients.forEach((client, namespace) => {
        client.on(constants_1.READY_EVENT, () => {
            redis_logger_1.logger.log((0, messages_1.READY_LOG)((0, utils_1.parseNamespace)(namespace)));
        });
    });
};
exports.displayReadyLog = displayReadyLog;
const displayErrorLog = (clients) => {
    clients.forEach((client, namespace) => {
        client.on(constants_1.ERROR_EVENT, (error) => {
            redis_logger_1.logger.error((0, messages_1.ERROR_LOG)({ namespace: (0, utils_1.parseNamespace)(namespace), error }), error.stack);
        });
    });
};
exports.displayErrorLog = displayErrorLog;
const quitClients = (clients) => {
    const promises = [];
    clients.forEach((client, namespace) => {
        if (client.status === constants_1.READY_EVENT) {
            promises.push(Promise.allSettled([Promise.resolve(namespace), client.quit()]));
            return;
        }
        client.disconnect();
    });
    return Promise.all(promises);
};
exports.quitClients = quitClients;
