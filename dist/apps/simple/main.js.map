{"version":3,"file":"main.js","mappings":"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","sources":["webpack://koj/./apps/simple/src/app/app.controller.ts","webpack://koj/./apps/simple/src/app/app.module.ts","webpack://koj/./apps/simple/src/app/app.service.ts","webpack://koj/./apps/simple/src/app/logger.middleware.ts","webpack://koj/./apps/simple/src/appp/app.controller.ts","webpack://koj/./apps/simple/src/appp/app.service.ts","webpack://koj/external commonjs \"@nestjs/common\"","webpack://koj/external commonjs \"@nestjs/core\"","webpack://koj/external commonjs \"@opentelemetry/api\"","webpack://koj/external commonjs \"tslib\"","webpack://koj/webpack/bootstrap","webpack://koj/./apps/simple/src/main.ts"],"sourcesContent":["import { Controller, Get, Req, Headers, Scope } from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { PinoLogger } from 'nestjs-pino';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(\n    private readonly appService: AppService,\n  ) // private readonly logger: PinoLogger,\n  {}\n\n  @Get()\n  getData() {\n    // this.logger.assign({ userid: 1 });\n    return this.appService.getData();\n  }\n}\n","import { Module, RequestMethod, NestModule, MiddlewareConsumer } from '@nestjs/common';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { LoggerModule } from 'nestjs-pino';\nimport { ApppController } from '../appp/app.controller';\nimport { ApppService } from '../appp/app.service';\nimport { loggerMiddleware } from './logger.middleware';\n\n@Module({\n  imports: [\n    // LoggerModule.forRoot({\n    //   pinoHttp: [\n    //     {\n    //       name: 'add some name to every JSON line',\n    //       level: process.env.NODE_ENV !== 'production' ? 'debug' : 'info',\n    //       // install 'pino-pretty' package in order to use the following option\n    //       transport:\n    //         process.env.NODE_ENV !== 'production' ? { target: 'pino-pretty' } : undefined,\n    //       useLevelLabels: true,\n    //       autoLogging: false,\n    //       // and all the others...\n    //     },\n    //   ],\n    //   forRoutes: ['*', AppController],\n    //   exclude: [{ method: RequestMethod.ALL, path: 'check' }],\n    // }),\n  ],\n  controllers: [AppController, ApppController],\n  providers: [AppService, ApppService],\n})\nexport class AppModule {}\n// export class AppModule implements NestModule {\n//   public configure(consumer: MiddlewareConsumer) {\n//     consumer.apply(loggerMiddleware({})).forRoutes('*');\n//   }\n// }\n","import { Injectable, Logger } from '@nestjs/common';\nimport { InjectPinoLogger, PinoLogger } from 'nestjs-pino';\n\n@Injectable()\nexport class AppService {\n  private readonly logger = new Logger(AppService.name);\n  // constructor(\n  //   // @InjectPinoLogger(AppService.name) private readonly logger: PinoLogger\n  // ) {}\n  getData(): { message: string } {\n    this.logger.log('hello');\n    return { message: 'Welcome to simple!' };\n  }\n}\n","import { PinoLogger } from 'nestjs-pino';\n// import { storage, Store } from 'nestjs-pino/storage';\nimport { pinoHttp } from 'pino-http';\n\nexport function loggerMiddleware(pinoHttpConfig) {\n  return (req, res, next) => {\n    console.log('middleware');\n    next();\n    // const pinoMw = pinoHttp(pinoHttpConfig as any);\n    // // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // // @ts-ignore\n    // PinoLogger.root = pinoMw.logger;\n    // pinoMw(req, res, () => {\n    //   storage.run(new Store(req.log), () => {\n    //     next();\n    //   });\n    // });\n  };\n}\n\n// import { Injectable, NestMiddleware } from '@nestjs/common';\n// import { Request, Response, NextFunction } from 'express';\n\n// @Injectable()\n// export class LoggerMiddleware implements NestMiddleware {\n//   use(req: Request, res: Response, next: NextFunction) {\n//     console.log('Request...');\n//     next();\n//   }\n// }\n","import { Controller, Get, Req, Headers, Scope } from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { PinoLogger } from 'nestjs-pino';\n\nimport { ApppService } from './app.service';\n\n@Controller({ scope: Scope.REQUEST, path: '/hi' })\nexport class ApppController {\n  constructor(\n    private readonly appService: ApppService,\n  ) // private readonly logger: PinoLogger,\n  {}\n\n  @Get()\n  getData() {\n    // this.logger.assign({ userid: 1 });\n    return this.appService.getData();\n  }\n}\n","import { Injectable } from '@nestjs/common';\nimport { InjectPinoLogger, PinoLogger } from 'nestjs-pino';\n\n@Injectable()\nexport class ApppService {\n  // constructor() // @InjectPinoLogger(ApppService.name) private readonly logger: PinoLogger\n  // {}\n  getData(): { message: string } {\n    // this.logger.info('hiii');\n    return { message: 'hiiii!' };\n  }\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@opentelemetry/api\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\n// import { Logger } from '@nestjs/common';\n// import { Logger } from 'nestjs-pino';\nimport { NestFactory } from '@nestjs/core';\nimport { propagation } from '@opentelemetry/api';\nimport { SelectivePropagator } from 'opentelemetry-propagator-selective';\nconsole.log('propagation registor', propagation.fields());\nimport { AppModule } from './app/app.module';\nimport { loggerMiddleware } from './app/logger.middleware';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, { bufferLogs: true });\n  const globalPrefix = '/api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3333;\n  app.use(loggerMiddleware(null));\n  await app.listen(port);\n  // app.useLogger(app.get(Logger));\n  // Logger.log(\n  //   `ðŸš€ Application is running on: http://localhost:${port}/${globalPrefix}`\n  // );\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}